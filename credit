{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "executionInfo": {
     "elapsed": 51,
     "status": "ok",
     "timestamp": 1668812876915,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "8o92tL1ruqih"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 21250,
     "status": "ok",
     "timestamp": 1668812898120,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "_UWzJ9fH4oXJ",
    "outputId": "687dcd2b-3448-48b9-ffb4-aec3e1a4caea"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 299
    },
    "executionInfo": {
     "elapsed": 7162,
     "status": "ok",
     "timestamp": 1668812905274,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "v4jWvnTIwZkK",
    "outputId": "5d77a91b-0e16-4284-f040-ba913ee2f8fb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-49c737c5-08d3-4153-9a72-476401e40b02\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.619995</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.690000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.660004</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.500000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798279</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.989998</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49c737c5-08d3-4153-9a72-476401e40b02')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-49c737c5-08d3-4153-9a72-476401e40b02 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-49c737c5-08d3-4153-9a72-476401e40b02');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
       "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
       "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
       "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
       "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
       "4 -0.270533  0.817739  ... -0.009431  0.798279 -0.137458  0.141267 -0.206010   \n",
       "\n",
       "        V26       V27       V28      Amount  Class  \n",
       "0 -0.189115  0.133558 -0.021053  149.619995    0.0  \n",
       "1  0.125895 -0.008983  0.014724    2.690000    0.0  \n",
       "2 -0.139097 -0.055353 -0.059752  378.660004    0.0  \n",
       "3 -0.221929  0.062723  0.061458  123.500000    0.0  \n",
       "4  0.502292  0.219422  0.215153   69.989998    0.0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creditcart.csv 경로에서 ... -> 경로복사 후 ctrl + V \n",
    "df = pd.read_csv('/content/drive/MyDrive/creditcard.csv', dtype = np.float32)\n",
    "#df = pd.read_csv('creditcard.csv', dtype = np.float32)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jygkpEKzxcKQ"
   },
   "source": [
    "##  tensorflow logistic regression vs sklearn LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "executionInfo": {
     "elapsed": 340,
     "status": "ok",
     "timestamp": 1668813642799,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "EGkBkFOEzV9c"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, confusion_matrix\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4BkBX7wh3fbP"
   },
   "source": [
    "# 데이터 전처리 및 분석"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 394
    },
    "executionInfo": {
     "elapsed": 1286,
     "status": "ok",
     "timestamp": 1668813644073,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "S7eeJxg93j_f",
    "outputId": "3d56da08-1a99-4f41-cabd-94b9707bad05"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-33706f9e-3ca6-45f5-8c3a-1dda5becbf6a\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>284807.000000</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>284807.000000</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>284807.000000</td>\n",
       "      <td>284807.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>94813.867188</td>\n",
       "      <td>1.339397e-08</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-4.800400e-08</td>\n",
       "      <td>6.643411e-09</td>\n",
       "      <td>2.657364e-08</td>\n",
       "      <td>-1.500125e-09</td>\n",
       "      <td>-1.071518e-09</td>\n",
       "      <td>-1.071518e-10</td>\n",
       "      <td>-3.214554e-10</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.928732e-09</td>\n",
       "      <td>3.643161e-09</td>\n",
       "      <td>3.214554e-10</td>\n",
       "      <td>1.259033e-09</td>\n",
       "      <td>2.143036e-09</td>\n",
       "      <td>1.034684e-09</td>\n",
       "      <td>1.138488e-10</td>\n",
       "      <td>-1.272427e-10</td>\n",
       "      <td>88.349609</td>\n",
       "      <td>0.001727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>47488.144531</td>\n",
       "      <td>1.958696e+00</td>\n",
       "      <td>1.651309</td>\n",
       "      <td>1.516255e+00</td>\n",
       "      <td>1.415869e+00</td>\n",
       "      <td>1.380247e+00</td>\n",
       "      <td>1.332271e+00</td>\n",
       "      <td>1.237094e+00</td>\n",
       "      <td>1.194353e+00</td>\n",
       "      <td>1.098632e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>7.345240e-01</td>\n",
       "      <td>7.257016e-01</td>\n",
       "      <td>6.244603e-01</td>\n",
       "      <td>6.056471e-01</td>\n",
       "      <td>5.212781e-01</td>\n",
       "      <td>4.822270e-01</td>\n",
       "      <td>4.036325e-01</td>\n",
       "      <td>3.300833e-01</td>\n",
       "      <td>250.120117</td>\n",
       "      <td>0.041527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-5.640751e+01</td>\n",
       "      <td>-72.715729</td>\n",
       "      <td>-4.832559e+01</td>\n",
       "      <td>-5.683171e+00</td>\n",
       "      <td>-1.137433e+02</td>\n",
       "      <td>-2.616051e+01</td>\n",
       "      <td>-4.355724e+01</td>\n",
       "      <td>-7.321672e+01</td>\n",
       "      <td>-1.343407e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.483038e+01</td>\n",
       "      <td>-1.093314e+01</td>\n",
       "      <td>-4.480774e+01</td>\n",
       "      <td>-2.836627e+00</td>\n",
       "      <td>-1.029540e+01</td>\n",
       "      <td>-2.604551e+00</td>\n",
       "      <td>-2.256568e+01</td>\n",
       "      <td>-1.543008e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>54201.500000</td>\n",
       "      <td>-9.203734e-01</td>\n",
       "      <td>-0.598550</td>\n",
       "      <td>-8.903648e-01</td>\n",
       "      <td>-8.486401e-01</td>\n",
       "      <td>-6.915971e-01</td>\n",
       "      <td>-7.682956e-01</td>\n",
       "      <td>-5.540759e-01</td>\n",
       "      <td>-2.086297e-01</td>\n",
       "      <td>-6.430976e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.283949e-01</td>\n",
       "      <td>-5.423504e-01</td>\n",
       "      <td>-1.618463e-01</td>\n",
       "      <td>-3.545861e-01</td>\n",
       "      <td>-3.171451e-01</td>\n",
       "      <td>-3.269839e-01</td>\n",
       "      <td>-7.083953e-02</td>\n",
       "      <td>-5.295979e-02</td>\n",
       "      <td>5.600000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>84692.000000</td>\n",
       "      <td>1.810880e-02</td>\n",
       "      <td>0.065486</td>\n",
       "      <td>1.798463e-01</td>\n",
       "      <td>-1.984653e-02</td>\n",
       "      <td>-5.433583e-02</td>\n",
       "      <td>-2.741871e-01</td>\n",
       "      <td>4.010308e-02</td>\n",
       "      <td>2.235804e-02</td>\n",
       "      <td>-5.142873e-02</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.945017e-02</td>\n",
       "      <td>6.781943e-03</td>\n",
       "      <td>-1.119293e-02</td>\n",
       "      <td>4.097605e-02</td>\n",
       "      <td>1.659350e-02</td>\n",
       "      <td>-5.213911e-02</td>\n",
       "      <td>1.342146e-03</td>\n",
       "      <td>1.124383e-02</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>139320.500000</td>\n",
       "      <td>1.315642e+00</td>\n",
       "      <td>0.803724</td>\n",
       "      <td>1.027196e+00</td>\n",
       "      <td>7.433413e-01</td>\n",
       "      <td>6.119264e-01</td>\n",
       "      <td>3.985649e-01</td>\n",
       "      <td>5.704361e-01</td>\n",
       "      <td>3.273458e-01</td>\n",
       "      <td>5.971390e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>1.863772e-01</td>\n",
       "      <td>5.285536e-01</td>\n",
       "      <td>1.476421e-01</td>\n",
       "      <td>4.395266e-01</td>\n",
       "      <td>3.507156e-01</td>\n",
       "      <td>2.409522e-01</td>\n",
       "      <td>9.104512e-02</td>\n",
       "      <td>7.827995e-02</td>\n",
       "      <td>77.165001</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>172792.000000</td>\n",
       "      <td>2.454930e+00</td>\n",
       "      <td>22.057730</td>\n",
       "      <td>9.382559e+00</td>\n",
       "      <td>1.687534e+01</td>\n",
       "      <td>3.480167e+01</td>\n",
       "      <td>7.330163e+01</td>\n",
       "      <td>1.205895e+02</td>\n",
       "      <td>2.000721e+01</td>\n",
       "      <td>1.559499e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>2.720284e+01</td>\n",
       "      <td>1.050309e+01</td>\n",
       "      <td>2.252841e+01</td>\n",
       "      <td>4.584549e+00</td>\n",
       "      <td>7.519588e+00</td>\n",
       "      <td>3.517346e+00</td>\n",
       "      <td>3.161220e+01</td>\n",
       "      <td>3.384781e+01</td>\n",
       "      <td>25691.160156</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 31 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33706f9e-3ca6-45f5-8c3a-1dda5becbf6a')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-33706f9e-3ca6-45f5-8c3a-1dda5becbf6a button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-33706f9e-3ca6-45f5-8c3a-1dda5becbf6a');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                Time            V1             V2            V3            V4  \\\n",
       "count  284807.000000  2.848070e+05  284807.000000  2.848070e+05  2.848070e+05   \n",
       "mean    94813.867188  1.339397e-08       0.000000 -4.800400e-08  6.643411e-09   \n",
       "std     47488.144531  1.958696e+00       1.651309  1.516255e+00  1.415869e+00   \n",
       "min         0.000000 -5.640751e+01     -72.715729 -4.832559e+01 -5.683171e+00   \n",
       "25%     54201.500000 -9.203734e-01      -0.598550 -8.903648e-01 -8.486401e-01   \n",
       "50%     84692.000000  1.810880e-02       0.065486  1.798463e-01 -1.984653e-02   \n",
       "75%    139320.500000  1.315642e+00       0.803724  1.027196e+00  7.433413e-01   \n",
       "max    172792.000000  2.454930e+00      22.057730  9.382559e+00  1.687534e+01   \n",
       "\n",
       "                 V5            V6            V7            V8            V9  \\\n",
       "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
       "mean   2.657364e-08 -1.500125e-09 -1.071518e-09 -1.071518e-10 -3.214554e-10   \n",
       "std    1.380247e+00  1.332271e+00  1.237094e+00  1.194353e+00  1.098632e+00   \n",
       "min   -1.137433e+02 -2.616051e+01 -4.355724e+01 -7.321672e+01 -1.343407e+01   \n",
       "25%   -6.915971e-01 -7.682956e-01 -5.540759e-01 -2.086297e-01 -6.430976e-01   \n",
       "50%   -5.433583e-02 -2.741871e-01  4.010308e-02  2.235804e-02 -5.142873e-02   \n",
       "75%    6.119264e-01  3.985649e-01  5.704361e-01  3.273458e-01  5.971390e-01   \n",
       "max    3.480167e+01  7.330163e+01  1.205895e+02  2.000721e+01  1.559499e+01   \n",
       "\n",
       "       ...           V21           V22           V23           V24  \\\n",
       "count  ...  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
       "mean   ... -1.928732e-09  3.643161e-09  3.214554e-10  1.259033e-09   \n",
       "std    ...  7.345240e-01  7.257016e-01  6.244603e-01  6.056471e-01   \n",
       "min    ... -3.483038e+01 -1.093314e+01 -4.480774e+01 -2.836627e+00   \n",
       "25%    ... -2.283949e-01 -5.423504e-01 -1.618463e-01 -3.545861e-01   \n",
       "50%    ... -2.945017e-02  6.781943e-03 -1.119293e-02  4.097605e-02   \n",
       "75%    ...  1.863772e-01  5.285536e-01  1.476421e-01  4.395266e-01   \n",
       "max    ...  2.720284e+01  1.050309e+01  2.252841e+01  4.584549e+00   \n",
       "\n",
       "                V25           V26           V27           V28         Amount  \\\n",
       "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  284807.000000   \n",
       "mean   2.143036e-09  1.034684e-09  1.138488e-10 -1.272427e-10      88.349609   \n",
       "std    5.212781e-01  4.822270e-01  4.036325e-01  3.300833e-01     250.120117   \n",
       "min   -1.029540e+01 -2.604551e+00 -2.256568e+01 -1.543008e+01       0.000000   \n",
       "25%   -3.171451e-01 -3.269839e-01 -7.083953e-02 -5.295979e-02       5.600000   \n",
       "50%    1.659350e-02 -5.213911e-02  1.342146e-03  1.124383e-02      22.000000   \n",
       "75%    3.507156e-01  2.409522e-01  9.104512e-02  7.827995e-02      77.165001   \n",
       "max    7.519588e+00  3.517346e+00  3.161220e+01  3.384781e+01   25691.160156   \n",
       "\n",
       "               Class  \n",
       "count  284807.000000  \n",
       "mean        0.001727  \n",
       "std         0.041527  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         0.000000  \n",
       "max         1.000000  \n",
       "\n",
       "[8 rows x 31 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 43,
     "status": "ok",
     "timestamp": 1668813644082,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "MLiRBsoZ3ppV",
    "outputId": "77576999-bc56-4ac8-feb0-1ded2da5a066"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time      0\n",
       "V1        0\n",
       "V2        0\n",
       "V3        0\n",
       "V4        0\n",
       "V5        0\n",
       "V6        0\n",
       "V7        0\n",
       "V8        0\n",
       "V9        0\n",
       "V10       0\n",
       "V11       0\n",
       "V12       0\n",
       "V13       0\n",
       "V14       0\n",
       "V15       0\n",
       "V16       0\n",
       "V17       0\n",
       "V18       0\n",
       "V19       0\n",
       "V20       0\n",
       "V21       0\n",
       "V22       0\n",
       "V23       0\n",
       "V24       0\n",
       "V25       0\n",
       "V26       0\n",
       "V27       0\n",
       "V28       0\n",
       "Amount    0\n",
       "Class     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치가 있는 열 확인. 0보다 큰 값이 있으면 NaN이 있는 행이 count된 것임\n",
    "# 결측치 없음으로 확인됨\n",
    "df.isna().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 143
    },
    "executionInfo": {
     "elapsed": 31,
     "status": "ok",
     "timestamp": 1668813644083,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "I3m8wI2GWTo0",
    "outputId": "bba5e2f2-6f11-4e30-9487-bd347792524d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-febaae28-8d0a-4877-b9cc-b7f686de0288\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Class</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>284315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-febaae28-8d0a-4877-b9cc-b7f686de0288')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-febaae28-8d0a-4877-b9cc-b7f686de0288 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-febaae28-8d0a-4877-b9cc-b7f686de0288');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "         Time\n",
       "Class        \n",
       "0.0    284315\n",
       "1.0       492"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Class별 개수 count\n",
    "df.groupby(['Class'])[['Time']].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "71PMbFKLWpHg"
   },
   "source": [
    "* imbalance data $\\Rightarrow$ oversampling / undersampling 또는 학습시 가중치 설정 고려 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1668813644389,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "zRwxaF3T2jlU"
   },
   "outputs": [],
   "source": [
    "# X와 y 설정\n",
    "# X : Time열 제외\n",
    "# y : target. 'Class'열\n",
    "X = df.iloc[:, 1:-1]\n",
    "y = df['Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 299
    },
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1668813644390,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "lYVcDnmWyo_8",
    "outputId": "13f4ae82-758c-43cd-b555-862be34accb8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-114acfb2-3358-406a-8d69-642d00c4c6a4\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>V10</th>\n",
       "      <th>...</th>\n",
       "      <th>V20</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>0.090794</td>\n",
       "      <td>...</td>\n",
       "      <td>0.251412</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.619995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>-0.166974</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.069083</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.690000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>0.207643</td>\n",
       "      <td>...</td>\n",
       "      <td>0.524980</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.660004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>-0.054952</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.208038</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>0.753074</td>\n",
       "      <td>...</td>\n",
       "      <td>0.408542</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798279</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.989998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-114acfb2-3358-406a-8d69-642d00c4c6a4')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-114acfb2-3358-406a-8d69-642d00c4c6a4 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-114acfb2-3358-406a-8d69-642d00c4c6a4');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "         V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9       V10  ...       V20       V21       V22       V23  \\\n",
       "0  0.098698  0.363787  0.090794  ...  0.251412 -0.018307  0.277838 -0.110474   \n",
       "1  0.085102 -0.255425 -0.166974  ... -0.069083 -0.225775 -0.638672  0.101288   \n",
       "2  0.247676 -1.514654  0.207643  ...  0.524980  0.247998  0.771679  0.909412   \n",
       "3  0.377436 -1.387024 -0.054952  ... -0.208038 -0.108300  0.005274 -0.190321   \n",
       "4 -0.270533  0.817739  0.753074  ...  0.408542 -0.009431  0.798279 -0.137458   \n",
       "\n",
       "        V24       V25       V26       V27       V28      Amount  \n",
       "0  0.066928  0.128539 -0.189115  0.133558 -0.021053  149.619995  \n",
       "1 -0.339846  0.167170  0.125895 -0.008983  0.014724    2.690000  \n",
       "2 -0.689281 -0.327642 -0.139097 -0.055353 -0.059752  378.660004  \n",
       "3 -1.175575  0.647376 -0.221929  0.062723  0.061458  123.500000  \n",
       "4  0.141267 -0.206010  0.502292  0.219422  0.215153   69.989998  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1668813644393,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "2xeJO0FR477-",
    "outputId": "5705268f-4675-4ad7-c9d1-c36de28f1bb6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of a training set : 213605\n",
      "Size of a test set : 71202\n",
      "Size of the entire data set 284807\n"
     ]
    }
   ],
   "source": [
    "# dividing X, y into training, test set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 40)\n",
    "print('Size of a training set : {}'.format(X_train.shape[0]))\n",
    "print('Size of a test set : {}'.format(X_test.shape[0]))\n",
    "print('Size of the entire data set {}'.format(X.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gIGPcMwKBsci"
   },
   "source": [
    "## Logistic regression\n",
    "\n",
    "* tensorflow 이용\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "executionInfo": {
     "elapsed": 2579,
     "status": "ok",
     "timestamp": 1668813647834,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "5uz5m0XjYSb4"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 24,
     "status": "ok",
     "timestamp": 1668813647836,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "RGjDWV7NYiRb",
    "outputId": "d8e37d8d-3d87-4fd7-cde2-ed9000c1da4a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(284807, 29)\n",
      "[[9.3519241e-01 7.6649040e-01 8.8136494e-01 ... 4.1897613e-01\n",
      "  3.1269664e-01 5.8237929e-03]\n",
      " [9.7854203e-01 7.7006662e-01 8.4029853e-01 ... 4.1634512e-01\n",
      "  3.1342265e-01 1.0470528e-04]\n",
      " [9.3521708e-01 7.5311762e-01 8.6814088e-01 ... 4.1548926e-01\n",
      "  3.1191131e-01 1.4738923e-02]\n",
      " ...\n",
      " [9.9090487e-01 7.6407969e-01 7.8110206e-01 ... 4.1659316e-01\n",
      "  3.1258485e-01 2.6421540e-03]\n",
      " [9.5420909e-01 7.7285570e-01 8.4958714e-01 ... 4.1851953e-01\n",
      "  3.1524515e-01 3.8923896e-04]\n",
      " [9.4923186e-01 7.6525640e-01 8.4960151e-01 ... 4.1646636e-01\n",
      "  3.1340083e-01 8.4464857e-03]]\n"
     ]
    }
   ],
   "source": [
    "# scaler : MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "X_tf = scaler.fit_transform(X)\n",
    "print(X_tf.shape)\n",
    "print(X_tf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1668813647838,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "5slpBumzfAFx",
    "outputId": "6a09f842-1aad-40c3-d4a0-3a92d814dee4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(284807, 1)\n",
      "0         0.0\n",
      "1         0.0\n",
      "2         0.0\n",
      "3         0.0\n",
      "4         0.0\n",
      "         ... \n",
      "284802    0.0\n",
      "284803    0.0\n",
      "284804    0.0\n",
      "284805    0.0\n",
      "284806    0.0\n",
      "Name: Class, Length: 284807, dtype: float32\n"
     ]
    }
   ],
   "source": [
    "# 여기서 reshape 해주지 않으면 아래 cost_function 식에서 연산 오류가 발생함\n",
    "y_tf = np.array(y.values, dtype = np.float32).reshape((-1,1))\n",
    "print(y_tf.shape)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1668813648749,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "vSk3EbSVYziM"
   },
   "outputs": [],
   "source": [
    "# W, b\n",
    "W = tf.Variable(tf.random.normal([29,1], dtype = tf.float32)) # W : input dim(X의 컬럼수) * output dim(y의 output수. 이진분류의 경우 1)\n",
    "b = tf.Variable(tf.ones([1], dtype = tf.float32)) # b : bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 7,
     "status": "ok",
     "timestamp": 1668813649744,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "FxRBmIgIZnZ5",
    "outputId": "05b247b3-082a-499d-9201-0ad267c31644"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.97685146]\n",
      " [0.9772225 ]\n",
      " [0.966127  ]\n",
      " ...\n",
      " [0.98155206]\n",
      " [0.9845887 ]\n",
      " [0.97129816]]\n"
     ]
    }
   ],
   "source": [
    "def hypothesis(x):\n",
    "  # sigmoid 식을 직접 작성할 경우 tf.math.log(hypothesis(X))의 처리에서 NaN문제가 발생하므로 tf.sigmoid()이용\n",
    "  z = tf.matmul(x,W) + b\n",
    "  return tf.sigmoid(z)\n",
    "print(hypothesis(X_tf).numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WeHj3PT7Z06z"
   },
   "source": [
    "## Cross entropy\n",
    "\n",
    "* $\\displaystyle -\\sum_{i=1}^{n}[y_i \\log{H_i}+(1-y_i) \\log{(1-H_i)}]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1668813652186,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "kUfBjLXxZwFX",
    "outputId": "65ea7d03-9f98-4f7e-9e61-b2121727c29a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(3.7355182, shape=(), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "def cost_function(H,Y):\n",
    "  # Cross entropy식\n",
    "  cost = -tf.reduce_mean(Y * tf.math.log(H) + (1-Y) * tf.math.log(1-H))\n",
    "  return cost\n",
    "\n",
    "#계산예시\n",
    "print(cost_function(hypothesis(X_tf), y_tf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 61436,
     "status": "ok",
     "timestamp": 1668813714738,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "Om-qhNYKbYzD",
    "outputId": "6a4db1bc-4ff4-4bfb-c10e-7b6d0553539f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "step : 0, loss = 3.735518217086792\n",
      "step : 200, loss = 1.974420428276062\n",
      "step : 400, loss = 0.8843432664871216\n",
      "step : 600, loss = 0.4457279443740845\n",
      "step : 800, loss = 0.27286821603775024\n",
      "step : 1000, loss = 0.19097569584846497\n",
      "step : 1200, loss = 0.1454271823167801\n",
      "step : 1400, loss = 0.11705788969993591\n",
      "step : 1600, loss = 0.09792069345712662\n",
      "step : 1800, loss = 0.08423872292041779\n",
      "[[-1.1821468 ]\n",
      " [-0.70464057]\n",
      " [-2.0135825 ]\n",
      " [-0.4211797 ]\n",
      " [ 0.6181067 ]\n",
      " [-1.112518  ]\n",
      " [ 0.9087258 ]\n",
      " [-0.80097264]\n",
      " [ 0.41663662]\n",
      " [-0.7012064 ]\n",
      " [ 0.39710343]\n",
      " [ 0.47302255]\n",
      " [-0.69148326]\n",
      " [-0.4401329 ]\n",
      " [ 0.709804  ]\n",
      " [ 0.71355397]\n",
      " [-0.68897635]\n",
      " [-0.38721523]\n",
      " [ 0.79493725]\n",
      " [-1.3151577 ]\n",
      " [ 2.4592464 ]\n",
      " [ 0.0878381 ]\n",
      " [-1.2537979 ]\n",
      " [ 1.0616412 ]\n",
      " [-0.03789743]\n",
      " [ 1.1083618 ]\n",
      " [-0.01125089]\n",
      " [ 0.13240105]\n",
      " [ 0.9514579 ]]\n",
      "[0.37536126]\n"
     ]
    }
   ],
   "source": [
    "# Hyper parameter setting\n",
    "learning_rate = .001\n",
    "optimizer = tf.optimizers.SGD(learning_rate)\n",
    "\n",
    "loss_hist = []\n",
    "for step in range(2000):\n",
    "  with tf.GradientTape() as tape:\n",
    "    pred = hypothesis(X_tf)\n",
    "    cost = cost_function(pred, y_tf)\n",
    "    gradients = tape.gradient(cost, [W,b])\n",
    "  optimizer.apply_gradients(zip(gradients, [W,b]))\n",
    "  \n",
    "  loss_hist.append(cost)\n",
    "\n",
    "  if step % 200 == 0:\n",
    "    print('step : {}, loss = {}'.format(step, cost.numpy()))\n",
    "print(W.numpy())\n",
    "print(b.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 390
    },
    "executionInfo": {
     "elapsed": 595,
     "status": "ok",
     "timestamp": 1668813715325,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "UPN_2cFzq5P1",
    "outputId": "9cf33d12-e380-4f1d-dd14-9fb0c0eb253d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,6))\n",
    "plt.plot(range(2000), loss_hist)\n",
    "plt.title('# of Iteration & Cost')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 364,
     "status": "ok",
     "timestamp": 1668773904441,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "u-mJ6GB-luAb",
    "outputId": "a80b151d-18fc-43ae-c4a5-0c134a29a1e1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(284807, 1), dtype=float32, numpy=\n",
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       ...,\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]], dtype=float32)>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict_function(H):\n",
    "  return tf.cast(H > .5, dtype = tf.float32)\n",
    "predict_function(hypothesis(X_tf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 487,
     "status": "ok",
     "timestamp": 1668773907387,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "fY1o3MvYnD4X",
    "outputId": "cad5df93-8f00-4aff-8118-28694ae664c4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9983\n",
      "precision score : 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recall score : 0.0000\n",
      "f1 score : 0.0000\n"
     ]
    }
   ],
   "source": [
    "# sklearn의 metrics 이용하여 accuracy, precision, recall, f1-score 계산하기\n",
    "def print_score(y_true, y_pred):\n",
    "  from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "  print('accuracy score : {:.4f}'.format(accuracy_score(y_true, y_pred)))\n",
    "  print('precision score : {:.4f}'.format(precision_score(y_true, y_pred)))\n",
    "  print('recall score : {:.4f}'.format(recall_score(y_true, y_pred)))\n",
    "  print('f1 score : {:.4f}'.format(f1_score(y_true, y_pred)))\n",
    "\n",
    "print_score(y_tf, predict_function(hypothesis(X_tf)).numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 449,
     "status": "ok",
     "timestamp": 1668773928448,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "eR9sLBlNnkrC",
    "outputId": "4ec84e86-074c-4a5a-bbdb-8d6db5b052cf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 약 28만개의 data 중 1로 예측한 개수\n",
    "predict_function(hypothesis(X_tf)).numpy().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qKylDFc7YPLn"
   },
   "source": [
    "* scikit learn 이용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 6079,
     "status": "ok",
     "timestamp": 1668773939859,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "Abs1tdOF4v_h",
    "outputId": "73c3bde9-4bf3-4bc4-cd0b-126ea72177f1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
     ]
    }
   ],
   "source": [
    "logistic_model = LogisticRegression(random_state = 5, max_iter = 100)\n",
    "logistic_model.fit(X_train, y_train)\n",
    "y_prediction = logistic_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1668773939859,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "41xtL7IJ4OiS",
    "outputId": "8e8a658b-bfbe-469c-ea46-4ce065adbab5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9993\n",
      "precision score : 0.9302\n",
      "recall score : 0.6612\n",
      "f1 score : 0.7729\n"
     ]
    }
   ],
   "source": [
    "# accuracy, precision, recall, f1score 출력 함수 만들기\n",
    "def print_score(y_true, y_pred):\n",
    "  from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "  print('accuracy score : {:.4f}'.format(accuracy_score(y_true, y_pred)))\n",
    "  print('precision score : {:.4f}'.format(precision_score(y_true, y_pred)))\n",
    "  print('recall score : {:.4f}'.format(recall_score(y_true, y_pred)))\n",
    "  print('f1 score : {:.4f}'.format(f1_score(y_true, y_pred)))\n",
    "print_score(y_test,y_prediction)\n",
    "#accuracy_score(y_true = y_test, y_pred = y_prediction)\n",
    "#precision_score(y_true, y_pred)\n",
    "#recall_score(y_true, y_pred)\n",
    "#f1_score(y_true, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TWBbXntNCYn3"
   },
   "source": [
    "* accuracy, precision score는 높지만 recall score(실제 Fraud인 observation 중 모델이 Fraud라고 예측한 비율)이 낮게 나타남\n",
    "\n",
    "* Tensorflow의 gradient descent를 이용해 직접 계산한 W, b로는 예측이 나빠진 원인?\n",
    " * Solver 차이?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "B73qSkDj7DV2"
   },
   "outputs": [],
   "source": [
    "# imblearn 모듈을 이용한 imbalanced dataset 다루기\n",
    "# Oversampling\n",
    "from imblearn.over_sampling import RandomOverSampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1668774504098,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "h0UVTGRctVyz",
    "outputId": "b5bb02e4-d636-48ce-bea8-1625f45bb35f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set의 Fraud data 비율 : 0.0017\n"
     ]
    }
   ],
   "source": [
    "print('Training set의 Fraud data 비율 : {:.4f}'.format(sum(y_train) / len(y_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LUbIRcIrtub2"
   },
   "source": [
    "## RandomOverSampler\n",
    "\n",
    "* target 데이터의 밸런스를 맞추기 위해 데이터 개수가 부족한 쪽을 oversampling 해줌.\n",
    "\n",
    "* $\\displaystyle  \\text{ratio of fraud data} = \\frac{\\text{sampling_strategy}}{(1 + \\text{sampling_strategy})}$\n",
    "\n",
    "* ex) $\\text{sampling_strategy} = 0.5$인 경우 oversampling한 데이터의 fraud data 비중은 $\\displaystyle \\frac{1}{3}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 517,
     "status": "ok",
     "timestamp": 1668774429632,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "fFTh7P_t8S4u",
    "outputId": "e0653c78-9a26-4306-e619-3beecc7ad19f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 개수 비율: 0.004974335044330378\n",
      "1 개수 비율: 0.9950256649556696\n"
     ]
    }
   ],
   "source": [
    "oversample = RandomOverSampler(sampling_strategy = 0.002, random_state = 5)\n",
    "\n",
    "X_train_over, y_train_over = oversample.fit_resample(X_train, y_train)\n",
    "print('0 개수 비율: {}'.format(sum(y_train_over) / len(y_train_over)))\n",
    "print('1 개수 비율: {}'.format((len(y_train_over) - sum(y_train_over)) / len(y_train_over)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 8608,
     "status": "ok",
     "timestamp": 1668774438633,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "i1UzO5ON9idb",
    "outputId": "ab19a395-1253-4061-bcea-e2806bf12458"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9994\n",
      "precision score : 0.8440\n",
      "recall score : 0.7603\n",
      "f1 score : 0.8000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
     ]
    }
   ],
   "source": [
    "logistic_model = LogisticRegression(random_state = 5, max_iter = 100)\n",
    "logistic_model.fit(X_train_over, y_train_over)\n",
    "y_prediction = logistic_model.predict(X_test)\n",
    "print_score(y_test,y_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 64146,
     "status": "ok",
     "timestamp": 1668775842114,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "bYjKump_vI4b",
    "outputId": "0ea8b061-15d7-41f1-dc12-485251bbed37"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
      "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
     ]
    }
   ],
   "source": [
    "# Grid Searching to find the best oversampling weight\n",
    "\n",
    "precision_scores = []\n",
    "recall_scores = []\n",
    "f1_scores = []\n",
    "\n",
    "sampling_strategies = [0.015, 0.002, 0.0025, 0.005, 0.01, 0.025, 0.05, 0.1, 0.2, 0.5]\n",
    "\n",
    "for sampling_strategy in sampling_strategies:\n",
    "  #oversampling\n",
    "  oversample = RandomOverSampler(sampling_strategy = sampling_strategy, random_state = 42)\n",
    "  X_train_over, y_train_over = oversample.fit_resample(X_train, y_train)\n",
    "\n",
    "  #Fitting logistic model\n",
    "  logistic_model = LogisticRegression(random_state = 5, max_iter = 100)\n",
    "  logistic_model.fit(X_train_over, y_train_over)\n",
    "  y_prediction = logistic_model.predict(X_test)\n",
    "  precision_scores.append(precision_score(y_test, y_prediction))\n",
    "  recall_scores.append(recall_score(y_test, y_prediction))\n",
    "  f1_scores.append(f1_score(y_test, y_prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 390
    },
    "executionInfo": {
     "elapsed": 448,
     "status": "ok",
     "timestamp": 1668775966984,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "vOdHBjFtwHY0",
    "outputId": "f245e48e-4543-42d6-bbb4-35444aeda0ec"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,6))\n",
    "plt.plot(sampling_strategies, precision_scores, label = 'Precision score')\n",
    "plt.plot(sampling_strategies, recall_scores, label = 'Recall score')\n",
    "plt.plot(sampling_strategies, f1_scores, label = 'f1-score')\n",
    "plt.title('F1, Recall & Precision scores by oversampling weights')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 442,
     "status": "ok",
     "timestamp": 1668776121008,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "3FKKlcYvzIgl",
    "outputId": "34447ef3-e04e-4b3c-af63-80d7ec05cf24"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f1-score 최대 oversampling weight : 0.01\n"
     ]
    }
   ],
   "source": [
    "print('f1-score 최대 oversampling weight : {}'.format(sampling_strategies[np.array(f1_scores).argmax()]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Bwg9QkNFDQzw"
   },
   "source": [
    "* Oversampling 효과로 인해 precision score(Fraud라 예측한 것들 중 실제 Fraud 인 data의 비율)이 크게 떨어짐을 확인함\n",
    "\n",
    "\n",
    "* Recall score 상승 : 실제 Fraud 중에서 모형이 Fraud라고 detect한 데이터의 비중 상승\n",
    "\n",
    "\n",
    "* 그래프 확인 시 oversampling weight를 크게 늘릴 수록, recall score 상승효과보다 precision score 하락 효과가 더 커 f1-score는 작아지는 경향을 보이게 됨.\n",
    " * F1-score가 최대가 되는 oversampling weight값은 0.01\n",
    "\n",
    "\n",
    "* 그러나 기존 데이터의 fraud data비율이 0.00497 = 0.497%에 불과했다는 점을 고려하면, 약 $1/101 \\approx 1\\text{%} $의 oversampling weight를 주는 것이 f1-score 관점에서 성능향상이 있음을 확인할 수 있음."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UvWHGY8z-RDM"
   },
   "source": [
    "* minmax scaler 적용하여 logistic regression 수행"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 299
    },
    "executionInfo": {
     "elapsed": 383,
     "status": "ok",
     "timestamp": 1668776151353,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "Zm_RgT74-kId",
    "outputId": "d23d7351-834a-4673-f1d8-0703b9cc6a99"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-8018b2ae-90cb-4f20-9e96-4cfc07c5d115\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>V10</th>\n",
       "      <th>...</th>\n",
       "      <th>V20</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.935192</td>\n",
       "      <td>0.766490</td>\n",
       "      <td>0.881365</td>\n",
       "      <td>0.313023</td>\n",
       "      <td>0.763439</td>\n",
       "      <td>0.267669</td>\n",
       "      <td>0.266815</td>\n",
       "      <td>0.786444</td>\n",
       "      <td>0.475312</td>\n",
       "      <td>0.510601</td>\n",
       "      <td>...</td>\n",
       "      <td>0.582942</td>\n",
       "      <td>0.561184</td>\n",
       "      <td>0.522992</td>\n",
       "      <td>0.663793</td>\n",
       "      <td>0.391253</td>\n",
       "      <td>0.585122</td>\n",
       "      <td>0.394557</td>\n",
       "      <td>0.418976</td>\n",
       "      <td>0.312697</td>\n",
       "      <td>0.005824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.978542</td>\n",
       "      <td>0.770067</td>\n",
       "      <td>0.840299</td>\n",
       "      <td>0.271797</td>\n",
       "      <td>0.766120</td>\n",
       "      <td>0.262192</td>\n",
       "      <td>0.264875</td>\n",
       "      <td>0.786298</td>\n",
       "      <td>0.453981</td>\n",
       "      <td>0.505267</td>\n",
       "      <td>...</td>\n",
       "      <td>0.579530</td>\n",
       "      <td>0.557840</td>\n",
       "      <td>0.480237</td>\n",
       "      <td>0.666938</td>\n",
       "      <td>0.336440</td>\n",
       "      <td>0.587290</td>\n",
       "      <td>0.446013</td>\n",
       "      <td>0.416345</td>\n",
       "      <td>0.313423</td>\n",
       "      <td>0.000105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.935217</td>\n",
       "      <td>0.753118</td>\n",
       "      <td>0.868141</td>\n",
       "      <td>0.268766</td>\n",
       "      <td>0.762329</td>\n",
       "      <td>0.281122</td>\n",
       "      <td>0.270177</td>\n",
       "      <td>0.788042</td>\n",
       "      <td>0.410603</td>\n",
       "      <td>0.513018</td>\n",
       "      <td>...</td>\n",
       "      <td>0.585855</td>\n",
       "      <td>0.565477</td>\n",
       "      <td>0.546030</td>\n",
       "      <td>0.678939</td>\n",
       "      <td>0.289354</td>\n",
       "      <td>0.559515</td>\n",
       "      <td>0.402727</td>\n",
       "      <td>0.415489</td>\n",
       "      <td>0.311911</td>\n",
       "      <td>0.014739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.941878</td>\n",
       "      <td>0.765304</td>\n",
       "      <td>0.868484</td>\n",
       "      <td>0.213661</td>\n",
       "      <td>0.765647</td>\n",
       "      <td>0.275559</td>\n",
       "      <td>0.266803</td>\n",
       "      <td>0.789434</td>\n",
       "      <td>0.414999</td>\n",
       "      <td>0.507585</td>\n",
       "      <td>...</td>\n",
       "      <td>0.578050</td>\n",
       "      <td>0.559734</td>\n",
       "      <td>0.510277</td>\n",
       "      <td>0.662607</td>\n",
       "      <td>0.223826</td>\n",
       "      <td>0.614245</td>\n",
       "      <td>0.389197</td>\n",
       "      <td>0.417669</td>\n",
       "      <td>0.314371</td>\n",
       "      <td>0.004807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.938617</td>\n",
       "      <td>0.776520</td>\n",
       "      <td>0.864251</td>\n",
       "      <td>0.269796</td>\n",
       "      <td>0.762975</td>\n",
       "      <td>0.263984</td>\n",
       "      <td>0.268968</td>\n",
       "      <td>0.782484</td>\n",
       "      <td>0.490950</td>\n",
       "      <td>0.524303</td>\n",
       "      <td>...</td>\n",
       "      <td>0.584615</td>\n",
       "      <td>0.561327</td>\n",
       "      <td>0.547271</td>\n",
       "      <td>0.663392</td>\n",
       "      <td>0.401270</td>\n",
       "      <td>0.566343</td>\n",
       "      <td>0.507497</td>\n",
       "      <td>0.420561</td>\n",
       "      <td>0.317490</td>\n",
       "      <td>0.002724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8018b2ae-90cb-4f20-9e96-4cfc07c5d115')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-8018b2ae-90cb-4f20-9e96-4cfc07c5d115 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-8018b2ae-90cb-4f20-9e96-4cfc07c5d115');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "         V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0  0.935192  0.766490  0.881365  0.313023  0.763439  0.267669  0.266815   \n",
       "1  0.978542  0.770067  0.840299  0.271797  0.766120  0.262192  0.264875   \n",
       "2  0.935217  0.753118  0.868141  0.268766  0.762329  0.281122  0.270177   \n",
       "3  0.941878  0.765304  0.868484  0.213661  0.765647  0.275559  0.266803   \n",
       "4  0.938617  0.776520  0.864251  0.269796  0.762975  0.263984  0.268968   \n",
       "\n",
       "         V8        V9       V10  ...       V20       V21       V22       V23  \\\n",
       "0  0.786444  0.475312  0.510601  ...  0.582942  0.561184  0.522992  0.663793   \n",
       "1  0.786298  0.453981  0.505267  ...  0.579530  0.557840  0.480237  0.666938   \n",
       "2  0.788042  0.410603  0.513018  ...  0.585855  0.565477  0.546030  0.678939   \n",
       "3  0.789434  0.414999  0.507585  ...  0.578050  0.559734  0.510277  0.662607   \n",
       "4  0.782484  0.490950  0.524303  ...  0.584615  0.561327  0.547271  0.663392   \n",
       "\n",
       "        V24       V25       V26       V27       V28    Amount  \n",
       "0  0.391253  0.585122  0.394557  0.418976  0.312697  0.005824  \n",
       "1  0.336440  0.587290  0.446013  0.416345  0.313423  0.000105  \n",
       "2  0.289354  0.559515  0.402727  0.415489  0.311911  0.014739  \n",
       "3  0.223826  0.614245  0.389197  0.417669  0.314371  0.004807  \n",
       "4  0.401270  0.566343  0.507497  0.420561  0.317490  0.002724  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = MinMaxScaler()\n",
    "X_scaled = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)\n",
    "X_scaled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "bHehCB8v-653"
   },
   "outputs": [],
   "source": [
    "X_train_scaled, X_test_scaled, y_train, y_test = train_test_split(X_scaled, y, test_size = .25, random_state = 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3239,
     "status": "ok",
     "timestamp": 1668776157675,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "Mknal4Ao_FUQ",
    "outputId": "53bdd21e-9a8a-4ca8-de3c-63ab80896d5e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9992\n",
      "precision score : 0.9079\n",
      "recall score : 0.5702\n",
      "f1 score : 0.7005\n"
     ]
    }
   ],
   "source": [
    "logistic_model = LogisticRegression(random_state = 5, max_iter = 100)\n",
    "logistic_model.fit(X_train_scaled, y_train)\n",
    "y_prediction = logistic_model.predict(X_test_scaled)\n",
    "print_score(y_test, y_prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3BL_tysC_7x7"
   },
   "source": [
    "* Recall score가 낮아지며 MinMaxScaling을 적용하지 않았을 때보다 f1-score 측면에서 오히려 성능이 하락함"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zeSYnvETCgT6"
   },
   "source": [
    "## ANN\n",
    "\n",
    "* activation function ReLU, sigmoid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Y4KOLql_AfAa"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 522,
     "status": "ok",
     "timestamp": 1668776161866,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "htcWQKHPBBZh",
    "outputId": "08f2d19b-1041-4904-f137-c4544fce9eff"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense (Dense)               (None, 50)                1500      \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 50)                2550      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 50)                2550      \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 1)                 51        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 6,651\n",
      "Trainable params: 6,651\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1])) # input_dim : # of features\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 90817,
     "status": "ok",
     "timestamp": 1668776257978,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "lWWMW-34BqOk",
    "outputId": "62fb2bc4-94c6-4583-cd4a-aaaf7cda6c82"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "3338/3338 [==============================] - 10s 3ms/step - loss: 0.0086 - accuracy: 0.9986\n",
      "Epoch 2/10\n",
      "3338/3338 [==============================] - 8s 2ms/step - loss: 0.0042 - accuracy: 0.9992\n",
      "Epoch 3/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0040 - accuracy: 0.9993\n",
      "Epoch 4/10\n",
      "3338/3338 [==============================] - 10s 3ms/step - loss: 0.0039 - accuracy: 0.9993\n",
      "Epoch 5/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0039 - accuracy: 0.9993\n",
      "Epoch 6/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0039 - accuracy: 0.9993\n",
      "Epoch 7/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0038 - accuracy: 0.9993\n",
      "Epoch 8/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0037 - accuracy: 0.9993\n",
      "Epoch 9/10\n",
      "3338/3338 [==============================] - 9s 3ms/step - loss: 0.0038 - accuracy: 0.9993\n",
      "Epoch 10/10\n",
      "3338/3338 [==============================] - 10s 3ms/step - loss: 0.0038 - accuracy: 0.9993\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "history = model.fit(X_train_scaled, y_train, epochs = 10, batch_size = 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5699,
     "status": "ok",
     "timestamp": 1668776275545,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "EMPycYlcBKi2",
    "outputId": "3ae5c80e-8471-4935-be93-66b4269c0809"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train acc : 0.99949\n"
     ]
    }
   ],
   "source": [
    "loss, train_acc = model.evaluate(X_test_scaled, y_test, verbose = 0)\n",
    "print('train acc : {:.5f}'.format(train_acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5653,
     "status": "ok",
     "timestamp": 1668776282322,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "TVquR8dXDRb7",
    "outputId": "cb115d75-424c-4d18-8495-c6424079f913"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2226/2226 [==============================] - 3s 1ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.8571\n",
      "recall score : 0.8430\n",
      "f1 score : 0.8500\n"
     ]
    }
   ],
   "source": [
    "y_prediction_ANN = model.predict(X_test_scaled) # [[0.87],[0.001], ... ]\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ek9_O-9VFVJL"
   },
   "source": [
    "* Logistic regression을 이용한 예측보다 recall score 및 f1 score가 크게 향상"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RAb6uBo41Sil"
   },
   "source": [
    "# Dropout method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "lUJfu-3iHPz-"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 119667,
     "status": "ok",
     "timestamp": 1668776669508,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "zw0uyhzRIlPJ",
    "outputId": "800943aa-e245-41b1-86f6-06b1756146d8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "3338/3338 [==============================] - 12s 3ms/step - loss: 0.0149 - accuracy: 0.9975\n",
      "Epoch 2/10\n",
      "3338/3338 [==============================] - 11s 3ms/step - loss: 0.0073 - accuracy: 0.9984\n",
      "Epoch 3/10\n",
      "3338/3338 [==============================] - 12s 3ms/step - loss: 0.0068 - accuracy: 0.9990\n",
      "Epoch 4/10\n",
      "3338/3338 [==============================] - 13s 4ms/step - loss: 0.0064 - accuracy: 0.9990\n",
      "Epoch 5/10\n",
      "3338/3338 [==============================] - 11s 3ms/step - loss: 0.0057 - accuracy: 0.9990\n",
      "Epoch 6/10\n",
      "3338/3338 [==============================] - 13s 4ms/step - loss: 0.0059 - accuracy: 0.9990\n",
      "Epoch 7/10\n",
      "3338/3338 [==============================] - 11s 3ms/step - loss: 0.0057 - accuracy: 0.9991\n",
      "Epoch 8/10\n",
      "3338/3338 [==============================] - 12s 4ms/step - loss: 0.0055 - accuracy: 0.9991\n",
      "Epoch 9/10\n",
      "3338/3338 [==============================] - 12s 4ms/step - loss: 0.0055 - accuracy: 0.9991\n",
      "Epoch 10/10\n",
      "3338/3338 [==============================] - 11s 3ms/step - loss: 0.0057 - accuracy: 0.9990\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "history = model.fit(X_train_scaled, y_train, epochs = 10, batch_size = 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5823,
     "status": "ok",
     "timestamp": 1668776682485,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "dw6oChXnJoKg",
    "outputId": "be20a364-2a17-4610-d111-07e15a4dbc7a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9996\n",
      "precision score : 0.9083\n",
      "recall score : 0.8182\n",
      "f1 score : 0.8609\n"
     ]
    }
   ],
   "source": [
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fm8g6CQTNrEc"
   },
   "source": [
    "## Note\n",
    "\n",
    "* Precision score : Fraud라고 예측한 것 중 실제로 Fraud인 것\n",
    "(실제 Fraud / (실제 Fraud + Fraud가 아니지만 Fraud라 예측))\n",
    "\n",
    "\n",
    "* Recall score : 실제 Fraud인 것 중 모형이 Fraud라 예측한 것\n",
    "\n",
    "\n",
    "## Interpretation\n",
    "\n",
    "* Precision score 대비 Recall score가 낮게나오면서 전체적인 f1 score가 떨어짐..\n",
    " * $\\rightarrow$ 실제로 Fraud인 것을 모형이 Fraud라고 제대로 예측하지 못하고 정상거래라고 오인했다는 것"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "C1DWRtNYOKXU"
   },
   "source": [
    "---\n",
    "## Early stopping method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 60637,
     "status": "ok",
     "timestamp": 1668776831742,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "oeFWvUk3O_aL",
    "outputId": "544e4155-6c97-4a7d-89b3-a48240c24fa2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1336/1336 [==============================] - 6s 4ms/step - loss: 0.0114 - accuracy: 0.9989 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 2/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0041 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 3/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0041 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 4/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0041 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 5/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0039 - accuracy: 0.9992 - val_loss: 0.0048 - val_accuracy: 0.9991\n",
      "Epoch 6/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0039 - accuracy: 0.9993 - val_loss: 0.0054 - val_accuracy: 0.9991\n",
      "Epoch 7/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0038 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9992\n",
      "Epoch 8/10\n",
      "1336/1336 [==============================] - 6s 4ms/step - loss: 0.0038 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 9/10\n",
      "1336/1336 [==============================] - 6s 4ms/step - loss: 0.0038 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 10/10\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0038 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9996\n",
      "precision score : 0.9083\n",
      "recall score : 0.8182\n",
      "f1 score : 0.8609\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "# Without applying early stopping method\n",
    "\n",
    "# divide the training set into a training set and a validation set\n",
    "\n",
    "X_train_scaled, X_val_scaled, y_train, y_val = train_test_split(X_train_scaled, y_train, test_size = .2, random_state = 40)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 10, batch_size = 128)\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "executionInfo": {
     "elapsed": 291,
     "status": "ok",
     "timestamp": 1668345316410,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "8deccY2fPpkl",
    "outputId": "df57dbf7-e7c3-443e-fa8c-52210dccf177"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.xlabel(\"The number of learning\")\n",
    "plt.ylabel(\"Cost\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 43232,
     "status": "ok",
     "timestamp": 1668345466111,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "0QJbsEaFPiqm",
    "outputId": "99fd62f9-5a6a-45a5-93ea-52ef50573304"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "1336/1336 [==============================] - 6s 4ms/step - loss: 0.0120 - accuracy: 0.9986 - val_loss: 0.0060 - val_accuracy: 0.9989\n",
      "Epoch 2/30\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0044 - accuracy: 0.9992 - val_loss: 0.0047 - val_accuracy: 0.9992\n",
      "Epoch 3/30\n",
      "1336/1336 [==============================] - 6s 5ms/step - loss: 0.0040 - accuracy: 0.9993 - val_loss: 0.0054 - val_accuracy: 0.9991\n",
      "Epoch 4/30\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0039 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 5/30\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0038 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 6/30\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0039 - accuracy: 0.9993 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 7/30\n",
      "1336/1336 [==============================] - 5s 4ms/step - loss: 0.0038 - accuracy: 0.9994 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 7: early stopping\n",
      "2226/2226 [==============================] - 3s 1ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.8929\n",
      "recall score : 0.8264\n",
      "f1 score : 0.8584\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 3)\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 30, batch_size = 128, callbacks = [es])\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "executionInfo": {
     "elapsed": 303,
     "status": "ok",
     "timestamp": 1668345549321,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "Jp9zpIN4R7Pt",
    "outputId": "80abfde2-5c7b-45d8-a956-b94affb30884"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.xlabel(\"The number of learning\")\n",
    "plt.ylabel(\"Cost\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 228419,
     "status": "ok",
     "timestamp": 1668778493917,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "AnVUvfVxSAWb",
    "outputId": "81f6efe5-68d8-46f0-e78e-e36fb6835227"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "2671/2671 [==============================] - 17s 6ms/step - loss: 0.0135 - accuracy: 0.9981 - val_loss: 0.0045 - val_accuracy: 0.9983\n",
      "Epoch 2/30\n",
      "2671/2671 [==============================] - 12s 4ms/step - loss: 0.0059 - accuracy: 0.9985 - val_loss: 0.0043 - val_accuracy: 0.9990\n",
      "Epoch 3/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0052 - accuracy: 0.9991 - val_loss: 0.0045 - val_accuracy: 0.9991\n",
      "Epoch 4/30\n",
      "2671/2671 [==============================] - 12s 4ms/step - loss: 0.0052 - accuracy: 0.9992 - val_loss: 0.0069 - val_accuracy: 0.9990\n",
      "Epoch 5/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0058 - val_accuracy: 0.9991\n",
      "Epoch 6/30\n",
      "2671/2671 [==============================] - 13s 5ms/step - loss: 0.0050 - accuracy: 0.9992 - val_loss: 0.0051 - val_accuracy: 0.9991\n",
      "Epoch 7/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0047 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 8/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0048 - accuracy: 0.9993 - val_loss: 0.0053 - val_accuracy: 0.9992\n",
      "Epoch 9/30\n",
      "2671/2671 [==============================] - 10s 4ms/step - loss: 0.0047 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 10/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0050 - accuracy: 0.9992 - val_loss: 0.0047 - val_accuracy: 0.9991\n",
      "Epoch 11/30\n",
      "2671/2671 [==============================] - 13s 5ms/step - loss: 0.0047 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 12/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0047 - accuracy: 0.9993 - val_loss: 0.0060 - val_accuracy: 0.9992\n",
      "Epoch 13/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0047 - accuracy: 0.9992 - val_loss: 0.0037 - val_accuracy: 0.9992\n",
      "Epoch 14/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0046 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 15/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0046 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9992\n",
      "Epoch 16/30\n",
      "2671/2671 [==============================] - 14s 5ms/step - loss: 0.0043 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 17/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0046 - accuracy: 0.9992 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 18/30\n",
      "2671/2671 [==============================] - 12s 5ms/step - loss: 0.0044 - accuracy: 0.9992 - val_loss: 0.0037 - val_accuracy: 0.9992\n",
      "Epoch 19/30\n",
      "2671/2671 [==============================] - 11s 4ms/step - loss: 0.0043 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 19: early stopping\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9996\n",
      "precision score : 0.9009\n",
      "recall score : 0.8264\n",
      "f1 score : 0.8621\n"
     ]
    }
   ],
   "source": [
    "# Dropout + EarlyStopping\n",
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 30, batch_size = 64, callbacks = [es])\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "B11O4qaBOtzF"
   },
   "source": [
    "* Weight balancing\n",
    "cf : https://3months.tistory.com/414"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1668347068995,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "yuSe7FsHO7te",
    "outputId": "a774b6c9-70e7-4e88-f0da-5be62dbee551"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.001727485630620034"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(y) / len(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 387779,
     "status": "ok",
     "timestamp": 1668778939875,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "RQCjXnO_OrFd",
    "outputId": "45b70bb4-6e0c-4a92-9b75-d70c114f7438"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "668/668 [==============================] - 5s 6ms/step - loss: 0.0333 - accuracy: 0.9974 - val_loss: 0.0047 - val_accuracy: 0.9983\n",
      "Epoch 2/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0119 - accuracy: 0.9991 - val_loss: 0.0044 - val_accuracy: 0.9992\n",
      "Epoch 3/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9992 - val_loss: 0.0046 - val_accuracy: 0.9992\n",
      "Epoch 4/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0094 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 5/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0090 - accuracy: 0.9992 - val_loss: 0.0044 - val_accuracy: 0.9990\n",
      "Epoch 6/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0088 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 7/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0087 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 8/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0087 - accuracy: 0.9991 - val_loss: 0.0060 - val_accuracy: 0.9984\n",
      "Epoch 9/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9991 - val_loss: 0.0044 - val_accuracy: 0.9991\n",
      "Epoch 10/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0083 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 11/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0082 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9991\n",
      "Epoch 12/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0091 - accuracy: 0.9992 - val_loss: 0.0050 - val_accuracy: 0.9991\n",
      "Epoch 13/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0083 - accuracy: 0.9993 - val_loss: 0.0045 - val_accuracy: 0.9989\n",
      "Epoch 14/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0081 - accuracy: 0.9992 - val_loss: 0.0048 - val_accuracy: 0.9992\n",
      "Epoch 15/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0082 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 16/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0082 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 17/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 18/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0082 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 19/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0078 - accuracy: 0.9993 - val_loss: 0.0047 - val_accuracy: 0.9992\n",
      "Epoch 20/100\n",
      "668/668 [==============================] - 5s 8ms/step - loss: 0.0077 - accuracy: 0.9993 - val_loss: 0.0054 - val_accuracy: 0.9992\n",
      "Epoch 21/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0080 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 22/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0077 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 23/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0083 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 24/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 25/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0075 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 26/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0081 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 27/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9991\n",
      "Epoch 28/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 29/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0077 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 30/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0077 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 31/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0078 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 32/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0076 - accuracy: 0.9994 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 33/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 34/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0078 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 35/100\n",
      "668/668 [==============================] - 5s 8ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 36/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0055 - val_accuracy: 0.9993\n",
      "Epoch 37/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 38/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0075 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9991\n",
      "Epoch 39/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 40/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 41/100\n",
      "668/668 [==============================] - 5s 8ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 42/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 43/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0079 - accuracy: 0.9993 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 44/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0073 - accuracy: 0.9994 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 45/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 46/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 47/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 48/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 49/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0070 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 50/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 51/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0075 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 52/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0075 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 53/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0072 - accuracy: 0.9993 - val_loss: 0.0037 - val_accuracy: 0.9994\n",
      "Epoch 54/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 55/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 56/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9994 - val_loss: 0.0042 - val_accuracy: 0.9994\n",
      "Epoch 57/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9994\n",
      "Epoch 58/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0070 - accuracy: 0.9994 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 59/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9994\n",
      "Epoch 60/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 61/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9994 - val_loss: 0.0037 - val_accuracy: 0.9994\n",
      "Epoch 62/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9994 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 63/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9994\n",
      "Epoch 64/100\n",
      "668/668 [==============================] - 3s 5ms/step - loss: 0.0074 - accuracy: 0.9994 - val_loss: 0.0036 - val_accuracy: 0.9994\n",
      "Epoch 65/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 66/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0073 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9994\n",
      "Epoch 67/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0070 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 68/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0052 - val_accuracy: 0.9991\n",
      "Epoch 69/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 70/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0067 - accuracy: 0.9994 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 71/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0075 - accuracy: 0.9993 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 72/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0068 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 73/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9994\n",
      "Epoch 74/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9994 - val_loss: 0.0051 - val_accuracy: 0.9988\n",
      "Epoch 75/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0075 - accuracy: 0.9993 - val_loss: 0.0034 - val_accuracy: 0.9994\n",
      "Epoch 76/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0070 - accuracy: 0.9993 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 77/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0067 - accuracy: 0.9994 - val_loss: 0.0034 - val_accuracy: 0.9994\n",
      "Epoch 78/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9994 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 79/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0068 - accuracy: 0.9994 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 80/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0072 - accuracy: 0.9994 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 81/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0069 - accuracy: 0.9994 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 82/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0071 - accuracy: 0.9994 - val_loss: 0.0038 - val_accuracy: 0.9994\n",
      "Epoch 83/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0070 - accuracy: 0.9994 - val_loss: 0.0034 - val_accuracy: 0.9994\n",
      "Epoch 84/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0070 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9995\n",
      "Epoch 85/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0067 - accuracy: 0.9994 - val_loss: 0.0038 - val_accuracy: 0.9994\n",
      "Epoch 86/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0068 - accuracy: 0.9994 - val_loss: 0.0040 - val_accuracy: 0.9994\n",
      "Epoch 87/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 88/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0034 - val_accuracy: 0.9994\n",
      "Epoch 89/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0070 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9994\n",
      "Epoch 90/100\n",
      "668/668 [==============================] - 4s 5ms/step - loss: 0.0067 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9993\n",
      "Epoch 91/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0066 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9994\n",
      "Epoch 92/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0068 - accuracy: 0.9994 - val_loss: 0.0043 - val_accuracy: 0.9988\n",
      "Epoch 93/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9994\n",
      "Epoch 94/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0069 - accuracy: 0.9994 - val_loss: 0.0037 - val_accuracy: 0.9994\n",
      "Epoch 95/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0069 - accuracy: 0.9994 - val_loss: 0.0035 - val_accuracy: 0.9995\n",
      "Epoch 96/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0068 - accuracy: 0.9994 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 97/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0070 - accuracy: 0.9994 - val_loss: 0.0045 - val_accuracy: 0.9994\n",
      "Epoch 98/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 99/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0069 - accuracy: 0.9994 - val_loss: 0.0037 - val_accuracy: 0.9994\n",
      "Epoch 100/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0072 - accuracy: 0.9993 - val_loss: 0.0036 - val_accuracy: 0.9994\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9996\n",
      "precision score : 0.9027\n",
      "recall score : 0.8430\n",
      "f1 score : 0.8718\n"
     ]
    }
   ],
   "source": [
    "# Dropout + EarlyStopping + Weight\n",
    "#class_weight = {0. : sum(y) / len(y), 1. : 1 - sum(y) / len(y)}\n",
    "\n",
    "# 학습시 Fraud data에 2.5배의 weight를 부여함\n",
    "class_weight = {0. : 1, 1. : 2.5}\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 100, batch_size = 256, class_weight = class_weight)\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 438984,
     "status": "ok",
     "timestamp": 1668779705536,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "cZqTSLVGY_B6",
    "outputId": "e5238724-9524-4cd4-db48-1dbdfce44615"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "668/668 [==============================] - 6s 8ms/step - loss: 0.0432 - accuracy: 0.9953 - val_loss: 0.0063 - val_accuracy: 0.9983\n",
      "Epoch 2/100\n",
      "668/668 [==============================] - 6s 8ms/step - loss: 0.0146 - accuracy: 0.9982 - val_loss: 0.0059 - val_accuracy: 0.9983\n",
      "Epoch 3/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0138 - accuracy: 0.9986 - val_loss: 0.0045 - val_accuracy: 0.9992\n",
      "Epoch 4/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0137 - accuracy: 0.9991 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 5/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0127 - accuracy: 0.9992 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 6/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0124 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 7/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0121 - accuracy: 0.9993 - val_loss: 0.0048 - val_accuracy: 0.9992\n",
      "Epoch 8/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0114 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 9/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0120 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 10/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0122 - accuracy: 0.9992 - val_loss: 0.0055 - val_accuracy: 0.9990\n",
      "Epoch 11/100\n",
      "668/668 [==============================] - 8s 12ms/step - loss: 0.0117 - accuracy: 0.9991 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 12/100\n",
      "668/668 [==============================] - 6s 10ms/step - loss: 0.0116 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 13/100\n",
      "668/668 [==============================] - 8s 12ms/step - loss: 0.0108 - accuracy: 0.9991 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 14/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0107 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 15/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0114 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9991\n",
      "Epoch 16/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0112 - accuracy: 0.9991 - val_loss: 0.0043 - val_accuracy: 0.9989\n",
      "Epoch 17/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0108 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 18/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0115 - accuracy: 0.9991 - val_loss: 0.0049 - val_accuracy: 0.9992\n",
      "Epoch 19/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0107 - accuracy: 0.9992 - val_loss: 0.0051 - val_accuracy: 0.9984\n",
      "Epoch 20/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0099 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 21/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0102 - accuracy: 0.9992 - val_loss: 0.0062 - val_accuracy: 0.9992\n",
      "Epoch 22/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0113 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 23/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0108 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 24/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0110 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 25/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 26/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0109 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 27/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0092 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 28/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0094 - accuracy: 0.9992 - val_loss: 0.0049 - val_accuracy: 0.9993\n",
      "Epoch 29/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0103 - accuracy: 0.9992 - val_loss: 0.0049 - val_accuracy: 0.9992\n",
      "Epoch 30/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0101 - accuracy: 0.9991 - val_loss: 0.0055 - val_accuracy: 0.9985\n",
      "Epoch 31/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0105 - accuracy: 0.9992 - val_loss: 0.0047 - val_accuracy: 0.9992\n",
      "Epoch 32/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0101 - accuracy: 0.9991 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 33/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0101 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 34/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0096 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 35/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0099 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 36/100\n",
      "668/668 [==============================] - 6s 9ms/step - loss: 0.0102 - accuracy: 0.9992 - val_loss: 0.0056 - val_accuracy: 0.9985\n",
      "Epoch 37/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0106 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 38/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 39/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0103 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 40/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0096 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9991\n",
      "Epoch 41/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0098 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 42/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 43/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0098 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9992\n",
      "Epoch 44/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0096 - accuracy: 0.9993 - val_loss: 0.0054 - val_accuracy: 0.9993\n",
      "Epoch 45/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0109 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9991\n",
      "Epoch 46/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0093 - accuracy: 0.9993 - val_loss: 0.0048 - val_accuracy: 0.9990\n",
      "Epoch 47/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0098 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 48/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0092 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 49/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0095 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9992\n",
      "Epoch 50/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 51/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0096 - accuracy: 0.9993 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 52/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0102 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9991\n",
      "Epoch 53/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 54/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 55/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0094 - accuracy: 0.9993 - val_loss: 0.0050 - val_accuracy: 0.9992\n",
      "Epoch 56/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 57/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0101 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 58/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0093 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 59/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0102 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 60/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 61/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0097 - accuracy: 0.9993 - val_loss: 0.0052 - val_accuracy: 0.9991\n",
      "Epoch 62/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0098 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 63/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0098 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 64/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0050 - val_accuracy: 0.9993\n",
      "Epoch 65/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0094 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 66/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0109 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 67/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0089 - accuracy: 0.9993 - val_loss: 0.0037 - val_accuracy: 0.9992\n",
      "Epoch 68/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0095 - accuracy: 0.9992 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 69/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0087 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 70/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0100 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 71/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0103 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 72/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 73/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0095 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 74/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0094 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 75/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 76/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0095 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 77/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0093 - accuracy: 0.9993 - val_loss: 0.0050 - val_accuracy: 0.9992\n",
      "Epoch 78/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0088 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9991\n",
      "Epoch 79/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0086 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9991\n",
      "Epoch 80/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 81/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 82/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0092 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 83/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0095 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 84/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 85/100\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0097 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 86/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0089 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 87/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0090 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 88/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0093 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 89/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0094 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 90/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0091 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 91/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0087 - accuracy: 0.9993 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 92/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0093 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 93/100\n",
      "668/668 [==============================] - 4s 7ms/step - loss: 0.0095 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 94/100\n",
      "668/668 [==============================] - 5s 8ms/step - loss: 0.0088 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 95/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0088 - accuracy: 0.9994 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 96/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0086 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9992\n",
      "Epoch 97/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0086 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 98/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0086 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 99/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0087 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 100/100\n",
      "668/668 [==============================] - 4s 6ms/step - loss: 0.0094 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.8571\n",
      "recall score : 0.8430\n",
      "f1 score : 0.8500\n"
     ]
    }
   ],
   "source": [
    "# Dropout + EarlyStopping + Weight\n",
    "#class_weight = {0. : sum(y) / len(y), 1. : 1 - sum(y) / len(y)}\n",
    "\n",
    "# 학습시 Fraud data에 3배의 weight를 부여함\n",
    "class_weight = {0. : 1, 1. : 3}\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 100, batch_size = 256, class_weight = class_weight)\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 765667,
     "status": "ok",
     "timestamp": 1668780983795,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "KuCg8ue8a7F2",
    "outputId": "5e4b54f0-21a1-4e03-a7fe-5303c0a8e908"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0251 - accuracy: 0.9980 - val_loss: 0.0048 - val_accuracy: 0.9983\n",
      "Epoch 2/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0109 - accuracy: 0.9982 - val_loss: 0.0048 - val_accuracy: 0.9983\n",
      "Epoch 3/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0113 - accuracy: 0.9986 - val_loss: 0.0049 - val_accuracy: 0.9991\n",
      "Epoch 4/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0109 - accuracy: 0.9990 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 5/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0100 - accuracy: 0.9991 - val_loss: 0.0127 - val_accuracy: 0.9966\n",
      "Epoch 6/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0093 - accuracy: 0.9991 - val_loss: 0.0046 - val_accuracy: 0.9991\n",
      "Epoch 7/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0102 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 8/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0100 - accuracy: 0.9990 - val_loss: 0.0056 - val_accuracy: 0.9991\n",
      "Epoch 9/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0087 - accuracy: 0.9992 - val_loss: 0.0052 - val_accuracy: 0.9991\n",
      "Epoch 10/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0096 - accuracy: 0.9992 - val_loss: 0.0058 - val_accuracy: 0.9991\n",
      "Epoch 11/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0097 - accuracy: 0.9991 - val_loss: 0.0045 - val_accuracy: 0.9991\n",
      "Epoch 12/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0091 - accuracy: 0.9991 - val_loss: 0.0048 - val_accuracy: 0.9992\n",
      "Epoch 13/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0088 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 14/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0101 - accuracy: 0.9990 - val_loss: 0.0049 - val_accuracy: 0.9987\n",
      "Epoch 15/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0099 - accuracy: 0.9991 - val_loss: 0.0077 - val_accuracy: 0.9991\n",
      "Epoch 16/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0098 - accuracy: 0.9992 - val_loss: 0.0044 - val_accuracy: 0.9989\n",
      "Epoch 17/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0092 - accuracy: 0.9991 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 18/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0090 - accuracy: 0.9991 - val_loss: 0.0053 - val_accuracy: 0.9985\n",
      "Epoch 19/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0094 - accuracy: 0.9990 - val_loss: 0.0044 - val_accuracy: 0.9989\n",
      "Epoch 20/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0094 - accuracy: 0.9991 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 21/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0090 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 22/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0083 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 23/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0087 - accuracy: 0.9991 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 24/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0081 - accuracy: 0.9991 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 25/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0083 - accuracy: 0.9992 - val_loss: 0.0046 - val_accuracy: 0.9989\n",
      "Epoch 26/100\n",
      "1336/1336 [==============================] - 9s 7ms/step - loss: 0.0084 - accuracy: 0.9991 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 27/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0079 - accuracy: 0.9991 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 28/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0088 - accuracy: 0.9991 - val_loss: 0.0047 - val_accuracy: 0.9989\n",
      "Epoch 29/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0087 - accuracy: 0.9991 - val_loss: 0.0045 - val_accuracy: 0.9991\n",
      "Epoch 30/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0084 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9992\n",
      "Epoch 31/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0080 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 32/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0079 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 33/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0218 - val_accuracy: 0.9989\n",
      "Epoch 34/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0094 - accuracy: 0.9991 - val_loss: 0.0061 - val_accuracy: 0.9991\n",
      "Epoch 35/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0075 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 36/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0072 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9992\n",
      "Epoch 37/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0079 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 38/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0080 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 39/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0077 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 40/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 41/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0079 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9992\n",
      "Epoch 42/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0077 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 43/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0083 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9991\n",
      "Epoch 44/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0082 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 45/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0078 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 46/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0076 - accuracy: 0.9991 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 47/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0069 - accuracy: 0.9992 - val_loss: 0.0052 - val_accuracy: 0.9990\n",
      "Epoch 48/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0076 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 49/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0071 - accuracy: 0.9992 - val_loss: 0.0050 - val_accuracy: 0.9992\n",
      "Epoch 50/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0075 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 51/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0072 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 52/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 53/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0079 - accuracy: 0.9991 - val_loss: 0.0045 - val_accuracy: 0.9991\n",
      "Epoch 54/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0075 - accuracy: 0.9992 - val_loss: 0.0047 - val_accuracy: 0.9993\n",
      "Epoch 55/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 56/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0075 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 57/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0078 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9991\n",
      "Epoch 58/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0079 - accuracy: 0.9991 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 59/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0077 - accuracy: 0.9992 - val_loss: 0.0052 - val_accuracy: 0.9988\n",
      "Epoch 60/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 61/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0073 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 62/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0071 - accuracy: 0.9992 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 63/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 64/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0071 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 65/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0078 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 66/100\n",
      "1336/1336 [==============================] - 9s 7ms/step - loss: 0.0072 - accuracy: 0.9992 - val_loss: 0.0046 - val_accuracy: 0.9993\n",
      "Epoch 67/100\n",
      "1336/1336 [==============================] - 10s 7ms/step - loss: 0.0102 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 68/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0052 - val_accuracy: 0.9993\n",
      "Epoch 69/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 70/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0070 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 71/100\n",
      "1336/1336 [==============================] - 9s 7ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 72/100\n",
      "1336/1336 [==============================] - 11s 8ms/step - loss: 0.0073 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 73/100\n",
      "1336/1336 [==============================] - 11s 9ms/step - loss: 0.0071 - accuracy: 0.9992 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 74/100\n",
      "1336/1336 [==============================] - 9s 7ms/step - loss: 0.0073 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 75/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0077 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 76/100\n",
      "1336/1336 [==============================] - 10s 8ms/step - loss: 0.0072 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9992\n",
      "Epoch 77/100\n",
      "1336/1336 [==============================] - 10s 8ms/step - loss: 0.0076 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9992\n",
      "Epoch 78/100\n",
      "1336/1336 [==============================] - 10s 8ms/step - loss: 0.0073 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 79/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0076 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 80/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 81/100\n",
      "1336/1336 [==============================] - 9s 6ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 82/100\n",
      "1336/1336 [==============================] - 10s 8ms/step - loss: 0.0068 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 83/100\n",
      "1336/1336 [==============================] - 10s 7ms/step - loss: 0.0072 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9991\n",
      "Epoch 84/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9992 - val_loss: 0.0041 - val_accuracy: 0.9991\n",
      "Epoch 85/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0080 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 86/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0080 - accuracy: 0.9993 - val_loss: 0.0108 - val_accuracy: 0.9993\n",
      "Epoch 87/100\n",
      "1336/1336 [==============================] - 9s 7ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 88/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0078 - val_accuracy: 0.9993\n",
      "Epoch 89/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0077 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 90/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 91/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0071 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 92/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0079 - accuracy: 0.9992 - val_loss: 0.0044 - val_accuracy: 0.9992\n",
      "Epoch 93/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0078 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 94/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0073 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9992\n",
      "Epoch 95/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0069 - accuracy: 0.9992 - val_loss: 0.0038 - val_accuracy: 0.9993\n",
      "Epoch 96/100\n",
      "1336/1336 [==============================] - 7s 6ms/step - loss: 0.0069 - accuracy: 0.9993 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 97/100\n",
      "1336/1336 [==============================] - 8s 6ms/step - loss: 0.0072 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 98/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0071 - accuracy: 0.9993 - val_loss: 0.0039 - val_accuracy: 0.9993\n",
      "Epoch 99/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0068 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9992\n",
      "Epoch 100/100\n",
      "1336/1336 [==============================] - 7s 5ms/step - loss: 0.0074 - accuracy: 0.9993 - val_loss: 0.0070 - val_accuracy: 0.9992\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.9048\n",
      "recall score : 0.7851\n",
      "f1 score : 0.8407\n"
     ]
    }
   ],
   "source": [
    "# Dropout + EarlyStopping + Weight\n",
    "#class_weight = {0. : sum(y) / len(y), 1. : 1 - sum(y) / len(y)}\n",
    "\n",
    "# 학습시 Fraud data에 2배의 weight를 부여함\n",
    "class_weight = {0. : 1, 1. : 2}\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(50, activation = 'relu', input_dim = X.shape[1]))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(50, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled, y_train, validation_data = (X_val_scaled, y_val), epochs = 100, batch_size = 128, class_weight = class_weight)\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled)\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)  # y_prediction_ANN의 각 원소가 []로 감싸져있으므로 reshape처리해야 where가 정상실행\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 279
    },
    "executionInfo": {
     "elapsed": 414,
     "status": "ok",
     "timestamp": 1668780994149,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "JcQcMnQkS0J7",
    "outputId": "acd1736c-3c5f-4395-ab4f-568452302d6f"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'], label='train')\n",
    "plt.plot(history.history['val_loss'], label='test')\n",
    "plt.xlabel(\"The number of learning\")\n",
    "plt.ylabel(\"Cost\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NggdHSX5TrKc"
   },
   "source": [
    "## Variable Selection\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "VUeS9tszT1NW"
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 38065,
     "status": "ok",
     "timestamp": 1668781717978,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "VGtFQ4SmT38h",
    "outputId": "8b247b7f-ee72-4994-f106-3c9648f4cc54"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9996\n",
      "precision score : 0.9596\n",
      "recall score : 0.7851\n",
      "f1 score : 0.8636\n"
     ]
    }
   ],
   "source": [
    "# Validation set 만들면서 Training set개수 줄어들었던 것 복구\n",
    "X_train_scaled, X_test_scaled, y_train, y_test = train_test_split(X_scaled, y, test_size = .25, random_state = 40)\n",
    "\n",
    "model_rf = RandomForestClassifier(n_estimators = 50, max_depth = 5, random_state = 5)\n",
    "model_rf.fit(X_train_scaled, y_train)\n",
    "rf_prediction = model_rf.predict(X_test_scaled)\n",
    "print_score(y_test, rf_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 41354,
     "status": "ok",
     "timestamp": 1668781873559,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "wspA9KD8NMg7",
    "outputId": "a786adee-fe37-4eff-bd44-f8d2c4a9a58a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score : 0.9995\n",
      "precision score : 0.8729\n",
      "recall score : 0.8512\n",
      "f1 score : 0.8619\n"
     ]
    }
   ],
   "source": [
    "# oversampling\n",
    "model_rf = RandomForestClassifier(n_estimators = 50, max_depth = 5, random_state = 5)\n",
    "oversample = RandomOverSampler(sampling_strategy = 0.025, random_state = 5)\n",
    "X_train_over, y_train_over = oversample.fit_resample(X_train_scaled, y_train)\n",
    "model_rf.fit(X_train_over, y_train_over)\n",
    "rf_prediction = model_rf.predict(X_test_scaled)\n",
    "print_score(y_test, rf_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 624,
     "status": "ok",
     "timestamp": 1668781892890,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "ysT33ZZmVOrS",
    "outputId": "57e7efcc-48d0-43b6-978b-3ddfaf1a7743"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00408407 0.00347991 0.04344261 0.05224989 0.00184435 0.01017887\n",
      " 0.00997738 0.00222614 0.03296547 0.18354044 0.06441764 0.11550203\n",
      " 0.00082348 0.21310039 0.00034033 0.06569343 0.13789528 0.04120858\n",
      " 0.00226359 0.0012557  0.00316    0.00026977 0.00117748 0.00056084\n",
      " 0.0002616  0.0007032  0.00428927 0.00195155 0.00113673]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([24, 21, 14, 23, 25, 12, 28, 22, 19,  4, 27,  7, 18, 20,  1,  0, 26,\n",
       "        6,  5,  8, 17,  2,  3, 10, 15, 11, 16,  9, 13])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importances = model_rf.feature_importances_\n",
    "indices_sorted = np.argsort(importances)\n",
    "print(importances)\n",
    "indices_sorted #importances 값이 작은 것부터 정렬함. 12번째의 importance가 가장 작다는 의미"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 621
    },
    "executionInfo": {
     "elapsed": 829,
     "status": "ok",
     "timestamp": 1668781894853,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "r0NKu0ZoXStz",
    "outputId": "730f9f36-25b9-485b-85ce-3836f3c65171"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (12,10))\n",
    "plt.bar(range(len(importances)), importances[indices_sorted])\n",
    "plt.xticks(range(len(importances)), X.columns[indices_sorted], rotation = 90)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7J1na_u8XzOb"
   },
   "source": [
    "* Random Forest를 이용한 feature importance가 상위 4개인 것만 이용."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "EV3ux7PrX7op"
   },
   "outputs": [],
   "source": [
    "usecol = X.columns[indices_sorted[-4:]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iwHk6Bu4YMMW"
   },
   "outputs": [],
   "source": [
    "# Early stopping 적용을 위한 validation set 다시 만들기\n",
    "X_train_scaled, X_val_scaled, y_train, y_val = train_test_split(X_train_scaled, y_train, test_size = .2, random_state = 45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 148606,
     "status": "ok",
     "timestamp": 1668782152860,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "WuzqIfJ3aUK2",
    "outputId": "1f398d2c-a6ac-4a05-8bbd-627028059323"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "418/418 [==============================] - 3s 6ms/step - loss: 0.0597 - accuracy: 0.9822 - val_loss: 0.0113 - val_accuracy: 0.9983\n",
      "Epoch 2/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0143 - accuracy: 0.9983 - val_loss: 0.0095 - val_accuracy: 0.9983\n",
      "Epoch 3/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0120 - accuracy: 0.9983 - val_loss: 0.0083 - val_accuracy: 0.9983\n",
      "Epoch 4/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0102 - accuracy: 0.9983 - val_loss: 0.0066 - val_accuracy: 0.9983\n",
      "Epoch 5/50\n",
      "418/418 [==============================] - 2s 6ms/step - loss: 0.0082 - accuracy: 0.9983 - val_loss: 0.0051 - val_accuracy: 0.9983\n",
      "Epoch 6/50\n",
      "418/418 [==============================] - 4s 9ms/step - loss: 0.0072 - accuracy: 0.9983 - val_loss: 0.0056 - val_accuracy: 0.9983\n",
      "Epoch 7/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0067 - accuracy: 0.9983 - val_loss: 0.0047 - val_accuracy: 0.9983\n",
      "Epoch 8/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0062 - accuracy: 0.9983 - val_loss: 0.0051 - val_accuracy: 0.9983\n",
      "Epoch 9/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0061 - accuracy: 0.9983 - val_loss: 0.0043 - val_accuracy: 0.9983\n",
      "Epoch 10/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9983 - val_loss: 0.0047 - val_accuracy: 0.9983\n",
      "Epoch 11/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9983 - val_loss: 0.0044 - val_accuracy: 0.9983\n",
      "Epoch 12/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0058 - accuracy: 0.9983 - val_loss: 0.0043 - val_accuracy: 0.9983\n",
      "Epoch 13/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0059 - accuracy: 0.9983 - val_loss: 0.0047 - val_accuracy: 0.9983\n",
      "Epoch 14/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9983 - val_loss: 0.0042 - val_accuracy: 0.9983\n",
      "Epoch 15/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0054 - accuracy: 0.9986 - val_loss: 0.0048 - val_accuracy: 0.9992\n",
      "Epoch 16/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0055 - accuracy: 0.9990 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 17/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9991 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 18/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 19/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0055 - accuracy: 0.9991 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 20/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0047 - val_accuracy: 0.9993\n",
      "Epoch 21/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 22/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0054 - accuracy: 0.9992 - val_loss: 0.0046 - val_accuracy: 0.9993\n",
      "Epoch 23/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0051 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 24/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0054 - accuracy: 0.9992 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 25/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 26/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 27/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9992 - val_loss: 0.0043 - val_accuracy: 0.9993\n",
      "Epoch 28/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0055 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 29/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0050 - accuracy: 0.9993 - val_loss: 0.0047 - val_accuracy: 0.9993\n",
      "Epoch 30/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 31/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 32/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0054 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 33/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 34/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0051 - accuracy: 0.9993 - val_loss: 0.0046 - val_accuracy: 0.9993\n",
      "Epoch 35/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0051 - accuracy: 0.9993 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 36/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 37/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0055 - accuracy: 0.9993 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 38/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0052 - accuracy: 0.9992 - val_loss: 0.0045 - val_accuracy: 0.9993\n",
      "Epoch 39/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0052 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 40/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0053 - accuracy: 0.9992 - val_loss: 0.0042 - val_accuracy: 0.9993\n",
      "Epoch 41/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0050 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 42/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0051 - accuracy: 0.9993 - val_loss: 0.0040 - val_accuracy: 0.9993\n",
      "Epoch 43/50\n",
      "418/418 [==============================] - 2s 5ms/step - loss: 0.0049 - accuracy: 0.9993 - val_loss: 0.0041 - val_accuracy: 0.9993\n",
      "Epoch 44/50\n",
      "418/418 [==============================] - 3s 6ms/step - loss: 0.0049 - accuracy: 0.9993 - val_loss: 0.0044 - val_accuracy: 0.9993\n",
      "Epoch 44: early stopping\n",
      "2226/2226 [==============================] - 3s 1ms/step\n",
      "accuracy score : 0.9996\n",
      "precision score : 0.9027\n",
      "recall score : 0.8430\n",
      "f1 score : 0.8718\n"
     ]
    }
   ],
   "source": [
    "# Hidden layer의 개수를 5개, Dropout과 Earlystopping 기법 적용\n",
    "model = Sequential()\n",
    "model.add(Dense(30, activation = 'relu', input_dim = len(usecol)))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled[usecol], y_train, validation_data = (X_val_scaled[usecol], y_val), epochs = 50, batch_size = 512, callbacks = [es])\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled[usecol])\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 173825,
     "status": "ok",
     "timestamp": 1668783331980,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "9ZIDYXL7LMht",
    "outputId": "9dfb65f1-a3d3-4b86-fb38-161e9df269d2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "10681/10681 [==============================] - 33s 3ms/step - loss: 0.0286 - accuracy: 0.9979 - val_loss: 0.0097 - val_accuracy: 0.9985\n",
      "Epoch 2/5\n",
      "10681/10681 [==============================] - 36s 3ms/step - loss: 0.0137 - accuracy: 0.9982 - val_loss: 0.0086 - val_accuracy: 0.9985\n",
      "Epoch 3/5\n",
      "10681/10681 [==============================] - 34s 3ms/step - loss: 0.0116 - accuracy: 0.9982 - val_loss: 0.0070 - val_accuracy: 0.9985\n",
      "Epoch 4/5\n",
      "10681/10681 [==============================] - 33s 3ms/step - loss: 0.0101 - accuracy: 0.9982 - val_loss: 0.0052 - val_accuracy: 0.9985\n",
      "Epoch 5/5\n",
      "10681/10681 [==============================] - 34s 3ms/step - loss: 0.0084 - accuracy: 0.9982 - val_loss: 0.0055 - val_accuracy: 0.9985\n",
      "2226/2226 [==============================] - 3s 1ms/step\n",
      "accuracy score : 0.9983\n",
      "precision score : 0.0000\n",
      "recall score : 0.0000\n",
      "f1 score : 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Batch size 줄이고 learning rate 낮춰봄..\n",
    "# 적은 데이터로 조금씩 학습하며, 학습수 많아짐\n",
    "X_train_scaled, X_val_scaled, y_train, y_val = train_test_split(X_train_scaled, y_train, test_size = .2, random_state = 45)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(30, activation = 'relu', input_dim = len(usecol)))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate = 0.0001)\n",
    "model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 2)\n",
    "history = model.fit(X_train_scaled[usecol], y_train, validation_data = (X_val_scaled[usecol], y_val), epochs = 5, batch_size = 16, callbacks = [es])\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled[usecol])\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 87747,
     "status": "ok",
     "timestamp": 1668784099304,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "O2P1L07hOMAL",
    "outputId": "ef0aa116-8462-49c1-a17c-6d1ed84256c7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "668/668 [==============================] - 4s 4ms/step - loss: 0.0403 - accuracy: 0.9939 - val_loss: 0.0103 - val_accuracy: 0.9985\n",
      "Epoch 2/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0128 - accuracy: 0.9982 - val_loss: 0.0070 - val_accuracy: 0.9985\n",
      "Epoch 3/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0096 - accuracy: 0.9982 - val_loss: 0.0045 - val_accuracy: 0.9985\n",
      "Epoch 4/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0080 - accuracy: 0.9982 - val_loss: 0.0045 - val_accuracy: 0.9985\n",
      "Epoch 5/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0069 - accuracy: 0.9982 - val_loss: 0.0048 - val_accuracy: 0.9985\n",
      "Epoch 6/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0067 - accuracy: 0.9982 - val_loss: 0.0041 - val_accuracy: 0.9985\n",
      "Epoch 7/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0066 - accuracy: 0.9982 - val_loss: 0.0037 - val_accuracy: 0.9985\n",
      "Epoch 8/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0064 - accuracy: 0.9982 - val_loss: 0.0033 - val_accuracy: 0.9985\n",
      "Epoch 9/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0061 - accuracy: 0.9982 - val_loss: 0.0035 - val_accuracy: 0.9985\n",
      "Epoch 10/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0062 - accuracy: 0.9982 - val_loss: 0.0039 - val_accuracy: 0.9985\n",
      "Epoch 11/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0062 - accuracy: 0.9982 - val_loss: 0.0042 - val_accuracy: 0.9985\n",
      "Epoch 12/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0063 - accuracy: 0.9985 - val_loss: 0.0032 - val_accuracy: 0.9994\n",
      "Epoch 13/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0062 - accuracy: 0.9988 - val_loss: 0.0033 - val_accuracy: 0.9994\n",
      "Epoch 14/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0061 - accuracy: 0.9989 - val_loss: 0.0040 - val_accuracy: 0.9985\n",
      "Epoch 15/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0064 - accuracy: 0.9988 - val_loss: 0.0032 - val_accuracy: 0.9985\n",
      "Epoch 16/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0057 - accuracy: 0.9990 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 17/30\n",
      "668/668 [==============================] - 3s 5ms/step - loss: 0.0060 - accuracy: 0.9990 - val_loss: 0.0035 - val_accuracy: 0.9992\n",
      "Epoch 18/30\n",
      "668/668 [==============================] - 3s 5ms/step - loss: 0.0062 - accuracy: 0.9990 - val_loss: 0.0032 - val_accuracy: 0.9995\n",
      "Epoch 19/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0057 - accuracy: 0.9990 - val_loss: 0.0036 - val_accuracy: 0.9995\n",
      "Epoch 20/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0058 - accuracy: 0.9990 - val_loss: 0.0031 - val_accuracy: 0.9995\n",
      "Epoch 21/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0034 - val_accuracy: 0.9990\n",
      "Epoch 22/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0059 - accuracy: 0.9991 - val_loss: 0.0031 - val_accuracy: 0.9995\n",
      "Epoch 23/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0055 - accuracy: 0.9992 - val_loss: 0.0030 - val_accuracy: 0.9993\n",
      "Epoch 24/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0056 - accuracy: 0.9992 - val_loss: 0.0031 - val_accuracy: 0.9993\n",
      "Epoch 25/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0057 - accuracy: 0.9992 - val_loss: 0.0031 - val_accuracy: 0.9994\n",
      "Epoch 26/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0058 - accuracy: 0.9992 - val_loss: 0.0031 - val_accuracy: 0.9995\n",
      "Epoch 27/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0059 - accuracy: 0.9991 - val_loss: 0.0033 - val_accuracy: 0.9995\n",
      "Epoch 28/30\n",
      "668/668 [==============================] - 5s 7ms/step - loss: 0.0056 - accuracy: 0.9990 - val_loss: 0.0032 - val_accuracy: 0.9994\n",
      "Epoch 28: early stopping\n",
      "2226/2226 [==============================] - 4s 2ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.9135\n",
      "recall score : 0.7851\n",
      "f1 score : 0.8444\n"
     ]
    }
   ],
   "source": [
    "# Batch size 많이, learning rate 높게\n",
    "model = Sequential()\n",
    "model.add(Dense(30, activation = 'relu', input_dim = len(usecol)))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001)\n",
    "model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled[usecol], y_train, validation_data = (X_val_scaled[usecol], y_val), epochs = 30, batch_size = 256, callbacks = [es])\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled[usecol])\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 46944,
     "status": "ok",
     "timestamp": 1668784861061,
     "user": {
      "displayName": "Myeonghun Lee",
      "userId": "07363699607077136340"
     },
     "user_tz": -540
    },
    "id": "iQCu31s-Tngf",
    "outputId": "2176ec3b-508a-466f-d2b7-534d0c18acd5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "668/668 [==============================] - 6s 6ms/step - loss: 0.0435 - accuracy: 0.9917 - val_loss: 0.0094 - val_accuracy: 0.9985\n",
      "Epoch 2/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0160 - accuracy: 0.9982 - val_loss: 0.0075 - val_accuracy: 0.9985\n",
      "Epoch 3/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0124 - accuracy: 0.9982 - val_loss: 0.0050 - val_accuracy: 0.9985\n",
      "Epoch 4/30\n",
      "668/668 [==============================] - 3s 5ms/step - loss: 0.0096 - accuracy: 0.9982 - val_loss: 0.0047 - val_accuracy: 0.9985\n",
      "Epoch 5/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0086 - accuracy: 0.9982 - val_loss: 0.0039 - val_accuracy: 0.9985\n",
      "Epoch 6/30\n",
      "668/668 [==============================] - 3s 5ms/step - loss: 0.0080 - accuracy: 0.9982 - val_loss: 0.0035 - val_accuracy: 0.9985\n",
      "Epoch 7/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0079 - accuracy: 0.9982 - val_loss: 0.0039 - val_accuracy: 0.9985\n",
      "Epoch 8/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0071 - accuracy: 0.9982 - val_loss: 0.0033 - val_accuracy: 0.9985\n",
      "Epoch 9/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0080 - accuracy: 0.9982 - val_loss: 0.0033 - val_accuracy: 0.9985\n",
      "Epoch 10/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0070 - accuracy: 0.9984 - val_loss: 0.0035 - val_accuracy: 0.9995\n",
      "Epoch 11/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0072 - accuracy: 0.9989 - val_loss: 0.0036 - val_accuracy: 0.9993\n",
      "Epoch 12/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0072 - accuracy: 0.9990 - val_loss: 0.0037 - val_accuracy: 0.9993\n",
      "Epoch 13/30\n",
      "668/668 [==============================] - 3s 4ms/step - loss: 0.0075 - accuracy: 0.9991 - val_loss: 0.0034 - val_accuracy: 0.9994\n",
      "Epoch 13: early stopping\n",
      "2226/2226 [==============================] - 3s 1ms/step\n",
      "accuracy score : 0.9995\n",
      "precision score : 0.9126\n",
      "recall score : 0.7769\n",
      "f1 score : 0.8393\n"
     ]
    }
   ],
   "source": [
    "class_weight = {0. : 1, 1. : 1.25}\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(30, activation = 'relu', input_dim = len(usecol)))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "model.add(Dense(30, activation = 'relu'))\n",
    "model.add(Dropout(.3))\n",
    "\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001)\n",
    "model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 5)\n",
    "history = model.fit(X_train_scaled[usecol], y_train, validation_data = (X_val_scaled[usecol], y_val), epochs = 30, batch_size = 256, callbacks = [es], class_weight = class_weight)\n",
    "\n",
    "y_prediction_ANN = model.predict(X_test_scaled[usecol])\n",
    "y_prediction_ANN = np.where(y_prediction_ANN.reshape(-1) > 0.5, 1., 0.)\n",
    "print_score(y_true = y_test, y_pred = y_prediction_ANN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1wjxPcVwdMqm"
   },
   "source": [
    "* 중요도 상위 5개 feature 대신 모든 feature를 이용해 학습했을 때, score가 크게 증가하지 않았음\n",
    "\n",
    "\n",
    "* variable selection을 해도 성능차이가 없으며, 연산량은 크게 감소함을 확인"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "b3aZZXbHddO7"
   },
   "source": [
    "## Question\n",
    "\n",
    "* 왜 Tensorflow로 돌린 logistic은 이상한 결과가 나왔는가?\n",
    "\n",
    "* Epoch수, Batch size, Learning rate, Hidden layer의 수, Neuron의 수 등 결정하는 방법?\n",
    "\n",
    "* Dropout과 Early stopping의 효과가 미미했는데 이유?\n",
    "\n",
    "* 학습시 class_weight을 적용해봤는데, 딥러닝에서 imbalance data를 학습할 때 이와 같이 하는게 일반적인지?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "f2gVzj_AF20q"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyNlFmfxc/RrtwamZb0Vds5a",
   "collapsed_sections": [
    "Fm8g6CQTNrEc"
   ],
   "mount_file_id": "1q3qc3kPJtYA0WaCdIbLVPUyj996W74Of",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
